// Mocks generated by Mockito 5.4.4 from annotations
// in rotation_sensor/test/coordinate_system_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:native_device_orientation/src/native_device_orientation.dart'
    as _i4;
import 'package:native_device_orientation/src/native_device_orientation_communicator.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NativeDeviceOrientationCommunicator].
///
/// See the documentation for Mockito's code generation for more information.
class MockNativeDeviceOrientationCommunicator extends _i1.Mock
    implements _i2.NativeDeviceOrientationCommunicator {
  @override
  _i3.Future<_i4.NativeDeviceOrientation> orientation({
    bool? useSensor = false,
    _i4.NativeDeviceOrientation? defaultOrientation =
        _i4.NativeDeviceOrientation.portraitUp,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #orientation,
          [],
          {
            #useSensor: useSensor,
            #defaultOrientation: defaultOrientation,
          },
        ),
        returnValue: _i3.Future<_i4.NativeDeviceOrientation>.value(
            _i4.NativeDeviceOrientation.portraitUp),
        returnValueForMissingStub:
            _i3.Future<_i4.NativeDeviceOrientation>.value(
                _i4.NativeDeviceOrientation.portraitUp),
      ) as _i3.Future<_i4.NativeDeviceOrientation>);

  @override
  _i3.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<_i4.NativeDeviceOrientation> onOrientationChanged({
    bool? useSensor = false,
    _i4.NativeDeviceOrientation? defaultOrientation =
        _i4.NativeDeviceOrientation.portraitUp,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onOrientationChanged,
          [],
          {
            #useSensor: useSensor,
            #defaultOrientation: defaultOrientation,
          },
        ),
        returnValue: _i3.Stream<_i4.NativeDeviceOrientation>.empty(),
        returnValueForMissingStub:
            _i3.Stream<_i4.NativeDeviceOrientation>.empty(),
      ) as _i3.Stream<_i4.NativeDeviceOrientation>);
}
